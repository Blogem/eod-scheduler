// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"
	"time"

	"github.com/blogem/eod-scheduler/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockScheduleRepository creates a new instance of MockScheduleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockScheduleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockScheduleRepository {
	mock := &MockScheduleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockScheduleRepository is an autogenerated mock type for the ScheduleRepository type
type MockScheduleRepository struct {
	mock.Mock
}

type MockScheduleRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockScheduleRepository) EXPECT() *MockScheduleRepository_Expecter {
	return &MockScheduleRepository_Expecter{mock: &_m.Mock}
}

// CountByTeamMember provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) CountByTeamMember(ctx context.Context, teamMemberID int) (int, error) {
	ret := _mock.Called(ctx, teamMemberID)

	if len(ret) == 0 {
		panic("no return value specified for CountByTeamMember")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return returnFunc(ctx, teamMemberID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = returnFunc(ctx, teamMemberID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, teamMemberID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_CountByTeamMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByTeamMember'
type MockScheduleRepository_CountByTeamMember_Call struct {
	*mock.Call
}

// CountByTeamMember is a helper method to define mock.On call
//   - ctx context.Context
//   - teamMemberID int
func (_e *MockScheduleRepository_Expecter) CountByTeamMember(ctx interface{}, teamMemberID interface{}) *MockScheduleRepository_CountByTeamMember_Call {
	return &MockScheduleRepository_CountByTeamMember_Call{Call: _e.mock.On("CountByTeamMember", ctx, teamMemberID)}
}

func (_c *MockScheduleRepository_CountByTeamMember_Call) Run(run func(ctx context.Context, teamMemberID int)) *MockScheduleRepository_CountByTeamMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_CountByTeamMember_Call) Return(n int, err error) *MockScheduleRepository_CountByTeamMember_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockScheduleRepository_CountByTeamMember_Call) RunAndReturn(run func(ctx context.Context, teamMemberID int) (int, error)) *MockScheduleRepository_CountByTeamMember_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) Create(ctx context.Context, entry *models.ScheduleEntry) error {
	ret := _mock.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.ScheduleEntry) error); ok {
		r0 = returnFunc(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScheduleRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockScheduleRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *models.ScheduleEntry
func (_e *MockScheduleRepository_Expecter) Create(ctx interface{}, entry interface{}) *MockScheduleRepository_Create_Call {
	return &MockScheduleRepository_Create_Call{Call: _e.mock.On("Create", ctx, entry)}
}

func (_c *MockScheduleRepository_Create_Call) Run(run func(ctx context.Context, entry *models.ScheduleEntry)) *MockScheduleRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.ScheduleEntry
		if args[1] != nil {
			arg1 = args[1].(*models.ScheduleEntry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_Create_Call) Return(err error) *MockScheduleRepository_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScheduleRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entry *models.ScheduleEntry) error) *MockScheduleRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) Delete(ctx context.Context, id int) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScheduleRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockScheduleRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockScheduleRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockScheduleRepository_Delete_Call {
	return &MockScheduleRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockScheduleRepository_Delete_Call) Run(run func(ctx context.Context, id int)) *MockScheduleRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_Delete_Call) Return(err error) *MockScheduleRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScheduleRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id int) error) *MockScheduleRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByDateRange provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) DeleteByDateRange(ctx context.Context, from time.Time, to time.Time) error {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByDateRange")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) error); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScheduleRepository_DeleteByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByDateRange'
type MockScheduleRepository_DeleteByDateRange_Call struct {
	*mock.Call
}

// DeleteByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
func (_e *MockScheduleRepository_Expecter) DeleteByDateRange(ctx interface{}, from interface{}, to interface{}) *MockScheduleRepository_DeleteByDateRange_Call {
	return &MockScheduleRepository_DeleteByDateRange_Call{Call: _e.mock.On("DeleteByDateRange", ctx, from, to)}
}

func (_c *MockScheduleRepository_DeleteByDateRange_Call) Run(run func(ctx context.Context, from time.Time, to time.Time)) *MockScheduleRepository_DeleteByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_DeleteByDateRange_Call) Return(err error) *MockScheduleRepository_DeleteByDateRange_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScheduleRepository_DeleteByDateRange_Call) RunAndReturn(run func(ctx context.Context, from time.Time, to time.Time) error) *MockScheduleRepository_DeleteByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDate provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) GetByDate(ctx context.Context, date time.Time) ([]models.ScheduleEntry, error) {
	ret := _mock.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetByDate")
	}

	var r0 []models.ScheduleEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) ([]models.ScheduleEntry, error)); ok {
		return returnFunc(ctx, date)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time) []models.ScheduleEntry); ok {
		r0 = returnFunc(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = returnFunc(ctx, date)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_GetByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDate'
type MockScheduleRepository_GetByDate_Call struct {
	*mock.Call
}

// GetByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date time.Time
func (_e *MockScheduleRepository_Expecter) GetByDate(ctx interface{}, date interface{}) *MockScheduleRepository_GetByDate_Call {
	return &MockScheduleRepository_GetByDate_Call{Call: _e.mock.On("GetByDate", ctx, date)}
}

func (_c *MockScheduleRepository_GetByDate_Call) Run(run func(ctx context.Context, date time.Time)) *MockScheduleRepository_GetByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_GetByDate_Call) Return(scheduleEntrys []models.ScheduleEntry, err error) *MockScheduleRepository_GetByDate_Call {
	_c.Call.Return(scheduleEntrys, err)
	return _c
}

func (_c *MockScheduleRepository_GetByDate_Call) RunAndReturn(run func(ctx context.Context, date time.Time) ([]models.ScheduleEntry, error)) *MockScheduleRepository_GetByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDateRange provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) GetByDateRange(ctx context.Context, from time.Time, to time.Time) ([]models.ScheduleEntry, error) {
	ret := _mock.Called(ctx, from, to)

	if len(ret) == 0 {
		panic("no return value specified for GetByDateRange")
	}

	var r0 []models.ScheduleEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) ([]models.ScheduleEntry, error)); ok {
		return returnFunc(ctx, from, to)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) []models.ScheduleEntry); ok {
		r0 = returnFunc(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ScheduleEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = returnFunc(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_GetByDateRange_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDateRange'
type MockScheduleRepository_GetByDateRange_Call struct {
	*mock.Call
}

// GetByDateRange is a helper method to define mock.On call
//   - ctx context.Context
//   - from time.Time
//   - to time.Time
func (_e *MockScheduleRepository_Expecter) GetByDateRange(ctx interface{}, from interface{}, to interface{}) *MockScheduleRepository_GetByDateRange_Call {
	return &MockScheduleRepository_GetByDateRange_Call{Call: _e.mock.On("GetByDateRange", ctx, from, to)}
}

func (_c *MockScheduleRepository_GetByDateRange_Call) Run(run func(ctx context.Context, from time.Time, to time.Time)) *MockScheduleRepository_GetByDateRange_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 time.Time
		if args[1] != nil {
			arg1 = args[1].(time.Time)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_GetByDateRange_Call) Return(scheduleEntrys []models.ScheduleEntry, err error) *MockScheduleRepository_GetByDateRange_Call {
	_c.Call.Return(scheduleEntrys, err)
	return _c
}

func (_c *MockScheduleRepository_GetByDateRange_Call) RunAndReturn(run func(ctx context.Context, from time.Time, to time.Time) ([]models.ScheduleEntry, error)) *MockScheduleRepository_GetByDateRange_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) GetByID(ctx context.Context, id int) (*models.ScheduleEntry, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.ScheduleEntry
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.ScheduleEntry, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.ScheduleEntry); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScheduleEntry)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockScheduleRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *MockScheduleRepository_Expecter) GetByID(ctx interface{}, id interface{}) *MockScheduleRepository_GetByID_Call {
	return &MockScheduleRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockScheduleRepository_GetByID_Call) Run(run func(ctx context.Context, id int)) *MockScheduleRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_GetByID_Call) Return(scheduleEntry *models.ScheduleEntry, err error) *MockScheduleRepository_GetByID_Call {
	_c.Call.Return(scheduleEntry, err)
	return _c
}

func (_c *MockScheduleRepository_GetByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*models.ScheduleEntry, error)) *MockScheduleRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) GetState(ctx context.Context) (*models.ScheduleState, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 *models.ScheduleState
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*models.ScheduleState, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *models.ScheduleState); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ScheduleState)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockScheduleRepository_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockScheduleRepository_Expecter) GetState(ctx interface{}) *MockScheduleRepository_GetState_Call {
	return &MockScheduleRepository_GetState_Call{Call: _e.mock.On("GetState", ctx)}
}

func (_c *MockScheduleRepository_GetState_Call) Run(run func(ctx context.Context)) *MockScheduleRepository_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_GetState_Call) Return(scheduleState *models.ScheduleState, err error) *MockScheduleRepository_GetState_Call {
	_c.Call.Return(scheduleState, err)
	return _c
}

func (_c *MockScheduleRepository_GetState_Call) RunAndReturn(run func(ctx context.Context) (*models.ScheduleState, error)) *MockScheduleRepository_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// HasFutureEntries provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) HasFutureEntries(ctx context.Context, teamMemberID int) (bool, error) {
	ret := _mock.Called(ctx, teamMemberID)

	if len(ret) == 0 {
		panic("no return value specified for HasFutureEntries")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (bool, error)); ok {
		return returnFunc(ctx, teamMemberID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) bool); ok {
		r0 = returnFunc(ctx, teamMemberID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, teamMemberID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockScheduleRepository_HasFutureEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasFutureEntries'
type MockScheduleRepository_HasFutureEntries_Call struct {
	*mock.Call
}

// HasFutureEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - teamMemberID int
func (_e *MockScheduleRepository_Expecter) HasFutureEntries(ctx interface{}, teamMemberID interface{}) *MockScheduleRepository_HasFutureEntries_Call {
	return &MockScheduleRepository_HasFutureEntries_Call{Call: _e.mock.On("HasFutureEntries", ctx, teamMemberID)}
}

func (_c *MockScheduleRepository_HasFutureEntries_Call) Run(run func(ctx context.Context, teamMemberID int)) *MockScheduleRepository_HasFutureEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_HasFutureEntries_Call) Return(b bool, err error) *MockScheduleRepository_HasFutureEntries_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockScheduleRepository_HasFutureEntries_Call) RunAndReturn(run func(ctx context.Context, teamMemberID int) (bool, error)) *MockScheduleRepository_HasFutureEntries_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) Update(ctx context.Context, entry *models.ScheduleEntry) error {
	ret := _mock.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.ScheduleEntry) error); ok {
		r0 = returnFunc(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScheduleRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockScheduleRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - entry *models.ScheduleEntry
func (_e *MockScheduleRepository_Expecter) Update(ctx interface{}, entry interface{}) *MockScheduleRepository_Update_Call {
	return &MockScheduleRepository_Update_Call{Call: _e.mock.On("Update", ctx, entry)}
}

func (_c *MockScheduleRepository_Update_Call) Run(run func(ctx context.Context, entry *models.ScheduleEntry)) *MockScheduleRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.ScheduleEntry
		if args[1] != nil {
			arg1 = args[1].(*models.ScheduleEntry)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_Update_Call) Return(err error) *MockScheduleRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScheduleRepository_Update_Call) RunAndReturn(run func(ctx context.Context, entry *models.ScheduleEntry) error) *MockScheduleRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateState provides a mock function for the type MockScheduleRepository
func (_mock *MockScheduleRepository) UpdateState(ctx context.Context, state *models.ScheduleState) error {
	ret := _mock.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for UpdateState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.ScheduleState) error); ok {
		r0 = returnFunc(ctx, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockScheduleRepository_UpdateState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateState'
type MockScheduleRepository_UpdateState_Call struct {
	*mock.Call
}

// UpdateState is a helper method to define mock.On call
//   - ctx context.Context
//   - state *models.ScheduleState
func (_e *MockScheduleRepository_Expecter) UpdateState(ctx interface{}, state interface{}) *MockScheduleRepository_UpdateState_Call {
	return &MockScheduleRepository_UpdateState_Call{Call: _e.mock.On("UpdateState", ctx, state)}
}

func (_c *MockScheduleRepository_UpdateState_Call) Run(run func(ctx context.Context, state *models.ScheduleState)) *MockScheduleRepository_UpdateState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.ScheduleState
		if args[1] != nil {
			arg1 = args[1].(*models.ScheduleState)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockScheduleRepository_UpdateState_Call) Return(err error) *MockScheduleRepository_UpdateState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockScheduleRepository_UpdateState_Call) RunAndReturn(run func(ctx context.Context, state *models.ScheduleState) error) *MockScheduleRepository_UpdateState_Call {
	_c.Call.Return(run)
	return _c
}
