// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repositories

import (
	"context"

	"github.com/blogem/eod-scheduler/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWorkingHoursRepository creates a new instance of MockWorkingHoursRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkingHoursRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkingHoursRepository {
	mock := &MockWorkingHoursRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWorkingHoursRepository is an autogenerated mock type for the WorkingHoursRepository type
type MockWorkingHoursRepository struct {
	mock.Mock
}

type MockWorkingHoursRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkingHoursRepository) EXPECT() *MockWorkingHoursRepository_Expecter {
	return &MockWorkingHoursRepository_Expecter{mock: &_m.Mock}
}

// GetActiveDays provides a mock function for the type MockWorkingHoursRepository
func (_mock *MockWorkingHoursRepository) GetActiveDays(ctx context.Context) ([]models.WorkingHours, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveDays")
	}

	var r0 []models.WorkingHours
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.WorkingHours, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.WorkingHours); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WorkingHours)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkingHoursRepository_GetActiveDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveDays'
type MockWorkingHoursRepository_GetActiveDays_Call struct {
	*mock.Call
}

// GetActiveDays is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorkingHoursRepository_Expecter) GetActiveDays(ctx interface{}) *MockWorkingHoursRepository_GetActiveDays_Call {
	return &MockWorkingHoursRepository_GetActiveDays_Call{Call: _e.mock.On("GetActiveDays", ctx)}
}

func (_c *MockWorkingHoursRepository_GetActiveDays_Call) Run(run func(ctx context.Context)) *MockWorkingHoursRepository_GetActiveDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWorkingHoursRepository_GetActiveDays_Call) Return(workingHourss []models.WorkingHours, err error) *MockWorkingHoursRepository_GetActiveDays_Call {
	_c.Call.Return(workingHourss, err)
	return _c
}

func (_c *MockWorkingHoursRepository_GetActiveDays_Call) RunAndReturn(run func(ctx context.Context) ([]models.WorkingHours, error)) *MockWorkingHoursRepository_GetActiveDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function for the type MockWorkingHoursRepository
func (_mock *MockWorkingHoursRepository) GetAll(ctx context.Context) ([]models.WorkingHours, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.WorkingHours
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]models.WorkingHours, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []models.WorkingHours); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WorkingHours)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkingHoursRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockWorkingHoursRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWorkingHoursRepository_Expecter) GetAll(ctx interface{}) *MockWorkingHoursRepository_GetAll_Call {
	return &MockWorkingHoursRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *MockWorkingHoursRepository_GetAll_Call) Run(run func(ctx context.Context)) *MockWorkingHoursRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockWorkingHoursRepository_GetAll_Call) Return(workingHourss []models.WorkingHours, err error) *MockWorkingHoursRepository_GetAll_Call {
	_c.Call.Return(workingHourss, err)
	return _c
}

func (_c *MockWorkingHoursRepository_GetAll_Call) RunAndReturn(run func(ctx context.Context) ([]models.WorkingHours, error)) *MockWorkingHoursRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByDay provides a mock function for the type MockWorkingHoursRepository
func (_mock *MockWorkingHoursRepository) GetByDay(ctx context.Context, dayOfWeek int) (*models.WorkingHours, error) {
	ret := _mock.Called(ctx, dayOfWeek)

	if len(ret) == 0 {
		panic("no return value specified for GetByDay")
	}

	var r0 *models.WorkingHours
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*models.WorkingHours, error)); ok {
		return returnFunc(ctx, dayOfWeek)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *models.WorkingHours); ok {
		r0 = returnFunc(ctx, dayOfWeek)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WorkingHours)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, dayOfWeek)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWorkingHoursRepository_GetByDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByDay'
type MockWorkingHoursRepository_GetByDay_Call struct {
	*mock.Call
}

// GetByDay is a helper method to define mock.On call
//   - ctx context.Context
//   - dayOfWeek int
func (_e *MockWorkingHoursRepository_Expecter) GetByDay(ctx interface{}, dayOfWeek interface{}) *MockWorkingHoursRepository_GetByDay_Call {
	return &MockWorkingHoursRepository_GetByDay_Call{Call: _e.mock.On("GetByDay", ctx, dayOfWeek)}
}

func (_c *MockWorkingHoursRepository_GetByDay_Call) Run(run func(ctx context.Context, dayOfWeek int)) *MockWorkingHoursRepository_GetByDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorkingHoursRepository_GetByDay_Call) Return(workingHours *models.WorkingHours, err error) *MockWorkingHoursRepository_GetByDay_Call {
	_c.Call.Return(workingHours, err)
	return _c
}

func (_c *MockWorkingHoursRepository_GetByDay_Call) RunAndReturn(run func(ctx context.Context, dayOfWeek int) (*models.WorkingHours, error)) *MockWorkingHoursRepository_GetByDay_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockWorkingHoursRepository
func (_mock *MockWorkingHoursRepository) Update(ctx context.Context, hours *models.WorkingHours) error {
	ret := _mock.Called(ctx, hours)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *models.WorkingHours) error); ok {
		r0 = returnFunc(ctx, hours)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorkingHoursRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockWorkingHoursRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - hours *models.WorkingHours
func (_e *MockWorkingHoursRepository_Expecter) Update(ctx interface{}, hours interface{}) *MockWorkingHoursRepository_Update_Call {
	return &MockWorkingHoursRepository_Update_Call{Call: _e.mock.On("Update", ctx, hours)}
}

func (_c *MockWorkingHoursRepository_Update_Call) Run(run func(ctx context.Context, hours *models.WorkingHours)) *MockWorkingHoursRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *models.WorkingHours
		if args[1] != nil {
			arg1 = args[1].(*models.WorkingHours)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockWorkingHoursRepository_Update_Call) Return(err error) *MockWorkingHoursRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorkingHoursRepository_Update_Call) RunAndReturn(run func(ctx context.Context, hours *models.WorkingHours) error) *MockWorkingHoursRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByDay provides a mock function for the type MockWorkingHoursRepository
func (_mock *MockWorkingHoursRepository) UpdateByDay(ctx context.Context, dayOfWeek int, startTime string, endTime string, active bool) error {
	ret := _mock.Called(ctx, dayOfWeek, startTime, endTime, active)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByDay")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, string, string, bool) error); ok {
		r0 = returnFunc(ctx, dayOfWeek, startTime, endTime, active)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockWorkingHoursRepository_UpdateByDay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByDay'
type MockWorkingHoursRepository_UpdateByDay_Call struct {
	*mock.Call
}

// UpdateByDay is a helper method to define mock.On call
//   - ctx context.Context
//   - dayOfWeek int
//   - startTime string
//   - endTime string
//   - active bool
func (_e *MockWorkingHoursRepository_Expecter) UpdateByDay(ctx interface{}, dayOfWeek interface{}, startTime interface{}, endTime interface{}, active interface{}) *MockWorkingHoursRepository_UpdateByDay_Call {
	return &MockWorkingHoursRepository_UpdateByDay_Call{Call: _e.mock.On("UpdateByDay", ctx, dayOfWeek, startTime, endTime, active)}
}

func (_c *MockWorkingHoursRepository_UpdateByDay_Call) Run(run func(ctx context.Context, dayOfWeek int, startTime string, endTime string, active bool)) *MockWorkingHoursRepository_UpdateByDay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 bool
		if args[4] != nil {
			arg4 = args[4].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockWorkingHoursRepository_UpdateByDay_Call) Return(err error) *MockWorkingHoursRepository_UpdateByDay_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockWorkingHoursRepository_UpdateByDay_Call) RunAndReturn(run func(ctx context.Context, dayOfWeek int, startTime string, endTime string, active bool) error) *MockWorkingHoursRepository_UpdateByDay_Call {
	_c.Call.Return(run)
	return _c
}
