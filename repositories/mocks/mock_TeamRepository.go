// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	models "github.com/blogem/eod-scheduler/models"
	mock "github.com/stretchr/testify/mock"
)

// MockTeamRepository is an autogenerated mock type for the TeamRepository type
type MockTeamRepository struct {
	mock.Mock
}

type MockTeamRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamRepository) EXPECT() *MockTeamRepository_Expecter {
	return &MockTeamRepository_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with no fields
func (_m *MockTeamRepository) Count() (int, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func() (int, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamRepository_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockTeamRepository_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
func (_e *MockTeamRepository_Expecter) Count() *MockTeamRepository_Count_Call {
	return &MockTeamRepository_Count_Call{Call: _e.mock.On("Count")}
}

func (_c *MockTeamRepository_Count_Call) Run(run func()) *MockTeamRepository_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTeamRepository_Count_Call) Return(_a0 int, _a1 error) *MockTeamRepository_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepository_Count_Call) RunAndReturn(run func() (int, error)) *MockTeamRepository_Count_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: member
func (_m *MockTeamRepository) Create(member *models.TeamMember) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TeamMember) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockTeamRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - member *models.TeamMember
func (_e *MockTeamRepository_Expecter) Create(member interface{}) *MockTeamRepository_Create_Call {
	return &MockTeamRepository_Create_Call{Call: _e.mock.On("Create", member)}
}

func (_c *MockTeamRepository_Create_Call) Run(run func(member *models.TeamMember)) *MockTeamRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.TeamMember))
	})
	return _c
}

func (_c *MockTeamRepository_Create_Call) Return(_a0 error) *MockTeamRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamRepository_Create_Call) RunAndReturn(run func(*models.TeamMember) error) *MockTeamRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockTeamRepository) Delete(id int) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTeamRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int
func (_e *MockTeamRepository_Expecter) Delete(id interface{}) *MockTeamRepository_Delete_Call {
	return &MockTeamRepository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockTeamRepository_Delete_Call) Run(run func(id int)) *MockTeamRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTeamRepository_Delete_Call) Return(_a0 error) *MockTeamRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamRepository_Delete_Call) RunAndReturn(run func(int) error) *MockTeamRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveMembers provides a mock function with no fields
func (_m *MockTeamRepository) GetActiveMembers() ([]models.TeamMember, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMembers")
	}

	var r0 []models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.TeamMember, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.TeamMember); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamRepository_GetActiveMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMembers'
type MockTeamRepository_GetActiveMembers_Call struct {
	*mock.Call
}

// GetActiveMembers is a helper method to define mock.On call
func (_e *MockTeamRepository_Expecter) GetActiveMembers() *MockTeamRepository_GetActiveMembers_Call {
	return &MockTeamRepository_GetActiveMembers_Call{Call: _e.mock.On("GetActiveMembers")}
}

func (_c *MockTeamRepository_GetActiveMembers_Call) Run(run func()) *MockTeamRepository_GetActiveMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTeamRepository_GetActiveMembers_Call) Return(_a0 []models.TeamMember, _a1 error) *MockTeamRepository_GetActiveMembers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepository_GetActiveMembers_Call) RunAndReturn(run func() ([]models.TeamMember, error)) *MockTeamRepository_GetActiveMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with no fields
func (_m *MockTeamRepository) GetAll() ([]models.TeamMember, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.TeamMember, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.TeamMember); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockTeamRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockTeamRepository_Expecter) GetAll() *MockTeamRepository_GetAll_Call {
	return &MockTeamRepository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockTeamRepository_GetAll_Call) Run(run func()) *MockTeamRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTeamRepository_GetAll_Call) Return(_a0 []models.TeamMember, _a1 error) *MockTeamRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepository_GetAll_Call) RunAndReturn(run func() ([]models.TeamMember, error)) *MockTeamRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockTeamRepository) GetByID(id int) (*models.TeamMember, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *models.TeamMember
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.TeamMember, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *models.TeamMember); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TeamMember)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockTeamRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int
func (_e *MockTeamRepository_Expecter) GetByID(id interface{}) *MockTeamRepository_GetByID_Call {
	return &MockTeamRepository_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockTeamRepository_GetByID_Call) Run(run func(id int)) *MockTeamRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockTeamRepository_GetByID_Call) Return(_a0 *models.TeamMember, _a1 error) *MockTeamRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamRepository_GetByID_Call) RunAndReturn(run func(int) (*models.TeamMember, error)) *MockTeamRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: member
func (_m *MockTeamRepository) Update(member *models.TeamMember) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.TeamMember) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTeamRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockTeamRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - member *models.TeamMember
func (_e *MockTeamRepository_Expecter) Update(member interface{}) *MockTeamRepository_Update_Call {
	return &MockTeamRepository_Update_Call{Call: _e.mock.On("Update", member)}
}

func (_c *MockTeamRepository_Update_Call) Run(run func(member *models.TeamMember)) *MockTeamRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.TeamMember))
	})
	return _c
}

func (_c *MockTeamRepository_Update_Call) Return(_a0 error) *MockTeamRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamRepository_Update_Call) RunAndReturn(run func(*models.TeamMember) error) *MockTeamRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamRepository creates a new instance of MockTeamRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamRepository {
	mock := &MockTeamRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
